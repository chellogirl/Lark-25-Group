# !/bin/bash

# tputMenu.sh: a menu driven system information program

# creat dat file if it does not exist
        if [ ! -f ./currentPlayer.dat ]
                then echo "placeholder" > ./currentPlayer.dat
                        echo "Created currentPlayer.dat"
                        sleep 2;
        fi

# set color variables

        BG_CYAN="$(tput setab 6)"
        BG_BLACK="$(tput setab 0)"
        FG_WHITE="$(tput setaf 7)"
        FG_BLACK="$(tput setaf 0)"

function resetVar()
{
        echo "Resetting Lark environment for new game, $username "
        sleep 1
        LP=0
        
}

# save screen
---Replace me-------

# Display menu until selection == 0
        while [[ $REPLY != 0 ]]; do
                echo -n ${BG_CYAN} ${FG_BLACK}
                clear

#cat user input of a here document
        cat <<EOF
                Please Select:

                1. Log into Lark game
                2. Start L.A.R.K game script
                0. Quit
EOF

read -p "Enter selection [0-2} > " selection

        # Clear area beneath menu
        tput cup 10 0 # position the cursoe
        echo -n ${BG_BLACK}${FG_WHITE}
        tput ed # Clears cursor to end of the line
        tput cup 110
# Act on selection
      case $selection in
        1)  read -p "What is your name? " userName
            if [ $(gawk '{print $1}' ./currentPlayer.dat) = $userName ]
               then
                 echo "Welcome back $userName"
                 sleep 2
             else
               echo -e $userName \n > ./currentPlayer.dat
               new=true
            fi
                cat ./GameStart.sh
            ;;
        2)  if [ new ]
               then resetVar # resets game variables and settings
               tput bold; echo -e "\nWelcome to Lark\n" ;tput sgr0 bold mode
               sleep 1;
            fi
            # run start up script
              echo -e  "Lark is starting now $userName\n";sleep 1
              cat ./GameStart.sh
              cd Lark-25-Group
            break
            ;;
        0)  break
            ;;
        *)  echo "Invalid entry."
            ;;
      esac
      printf "\n\nPress any key to continue."
      read -n 1
    done

# Restore saved screen
echo "Program terminated."
